package com.fancoff.coffeemaker.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fancoff.coffeemaker.bean.coffe.SeckillBean.TextBeanConverter;
import com.fancoff.coffeemaker.bean.coffe.TextBean;

import com.fancoff.coffeemaker.bean.coffe.SeckillBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SECKILL_BEAN".
*/
public class SeckillBeanDao extends AbstractDao<SeckillBean, Long> {

    public static final String TABLENAME = "SECKILL_BEAN";

    /**
     * Properties of entity SeckillBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Coffee_id = new Property(1, int.class, "coffee_id", false, "COFFEE_ID");
        public final static Property Price = new Property(2, String.class, "price", false, "PRICE");
        public final static Property Effect_time = new Property(3, String.class, "effect_time", false, "EFFECT_TIME");
        public final static Property Expiration_time = new Property(4, String.class, "expiration_time", false, "EXPIRATION_TIME");
        public final static Property L_effect_time = new Property(5, long.class, "l_effect_time", false, "L_EFFECT_TIME");
        public final static Property L_expiration_time = new Property(6, long.class, "l_expiration_time", false, "L_EXPIRATION_TIME");
        public final static Property Total = new Property(7, int.class, "total", false, "TOTAL");
    }

    private final TextBeanConverter priceConverter = new TextBeanConverter();

    public SeckillBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SeckillBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SECKILL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"COFFEE_ID\" INTEGER NOT NULL ," + // 1: coffee_id
                "\"PRICE\" TEXT," + // 2: price
                "\"EFFECT_TIME\" TEXT," + // 3: effect_time
                "\"EXPIRATION_TIME\" TEXT," + // 4: expiration_time
                "\"L_EFFECT_TIME\" INTEGER NOT NULL ," + // 5: l_effect_time
                "\"L_EXPIRATION_TIME\" INTEGER NOT NULL ," + // 6: l_expiration_time
                "\"TOTAL\" INTEGER NOT NULL );"); // 7: total
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SECKILL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SeckillBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getCoffee_id());
 
        TextBean price = entity.getPrice();
        if (price != null) {
            stmt.bindString(3, priceConverter.convertToDatabaseValue(price));
        }
 
        String effect_time = entity.getEffect_time();
        if (effect_time != null) {
            stmt.bindString(4, effect_time);
        }
 
        String expiration_time = entity.getExpiration_time();
        if (expiration_time != null) {
            stmt.bindString(5, expiration_time);
        }
        stmt.bindLong(6, entity.getL_effect_time());
        stmt.bindLong(7, entity.getL_expiration_time());
        stmt.bindLong(8, entity.getTotal());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SeckillBean entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getCoffee_id());
 
        TextBean price = entity.getPrice();
        if (price != null) {
            stmt.bindString(3, priceConverter.convertToDatabaseValue(price));
        }
 
        String effect_time = entity.getEffect_time();
        if (effect_time != null) {
            stmt.bindString(4, effect_time);
        }
 
        String expiration_time = entity.getExpiration_time();
        if (expiration_time != null) {
            stmt.bindString(5, expiration_time);
        }
        stmt.bindLong(6, entity.getL_effect_time());
        stmt.bindLong(7, entity.getL_expiration_time());
        stmt.bindLong(8, entity.getTotal());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SeckillBean readEntity(Cursor cursor, int offset) {
        SeckillBean entity = new SeckillBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // coffee_id
            cursor.isNull(offset + 2) ? null : priceConverter.convertToEntityProperty(cursor.getString(offset + 2)), // price
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // effect_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // expiration_time
            cursor.getLong(offset + 5), // l_effect_time
            cursor.getLong(offset + 6), // l_expiration_time
            cursor.getInt(offset + 7) // total
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SeckillBean entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCoffee_id(cursor.getInt(offset + 1));
        entity.setPrice(cursor.isNull(offset + 2) ? null : priceConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setEffect_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpiration_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setL_effect_time(cursor.getLong(offset + 5));
        entity.setL_expiration_time(cursor.getLong(offset + 6));
        entity.setTotal(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SeckillBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SeckillBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SeckillBean entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
